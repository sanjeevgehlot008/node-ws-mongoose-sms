"use strict";

require('dotenv').config();
var ws = require("nodejs-websocket");
var Socket = require("./Socket");
var Response = require("./Response.js");
var Router = require("./Router.js");



module.exports = class WebsocketRouter {

	constructor() {
		this.router = new Router();
		this.sockets = [];
		this.headers = {status: 200};
		this._events = {};	

		// Get all origins from .env (WEBSOCKET_ORIGIN)
		var origins = process.env.WEBSOCKET_ORIGIN;
		if (typeof origins!="undefined") 
			origins = origins.split(",");
		else
			origins = ["*"];

		this.setAllowedOrigins(...origins);	
	}

	createServer(port) {

		if (typeof port!="number")
			port = 4044;

		var websocketRouter = this;

		this.server = ws.createServer(function (connection) {

			if (!websocketRouter._originAllowed(connection.headers.origin)) {
				connection.close();
				return;
			}

			var socket = new Socket(connection);

			// Add socket to connected socket list
			websocketRouter.sockets.push(socket);

			// Listen to text and pass to parse input
			connection.on("text", function(data) {
				websocketRouter._getEventListener("request")(socket, data);
				websocketRouter._parseInput(socket, data);
			});


			
		    connection.on("close", websocketRouter._onclose(socket));
		    connection.on("error", websocketRouter._getEventListener("error"));
		    // TODO
		    // connection.on("binary", websocketRouter._getEventListener("binary")); 

		    websocketRouter._getEventListener("connect")(socket);
		}).listen(port);

		this.server.on("error", websocketRouter._getEventListener("servererror"));
		this.server.on("close", websocketRouter._getEventListener("serverclose"));
		this.server.on("listening", websocketRouter._getEventListener("serverready"));
	}

	_originAllowed(origin) {
		return this.origins.indexOf("*")>=0 || this.origins.indexOf(origin)>=0;
	}

	setAllowedOrigins(...origins) {
		this.origins = origins;
	}

	_getEventListener(event) {
		if (this._events.hasOwnProperty(event))
			return this._events[event];
		return function() {};
	}

	on(event, callback) {
		this._events[event] = callback;
	}

	_onclose(socket) {
		return (code, reason) => {
			this._removeSocket(socket);
			return this._getEventListener("disconnect")(code, reason);
		}
	}

	_removeSocket(socket) {
		for (var i=0; i<this.sockets.length; i++) {
			if (this.sockets[i]==socket) 
				this.sockets.splice(i,1);
		}
	}

	_parseInput(socket, data) {
		// Get args
		var request, response;
		try {
			request = JSON.parse(data);
			request.type = request.type.toLowerCase();
			response = new Response(this, socket, request);
		} catch (e) {
			response = new Response(this, socket);
			response.get("REQUEST_INVALID", "400 - Request didnt have the correct format.", {status: 400});
			return;
		}

		try {
			// check if route exists or send 404 response
			if (!this.router._routeExists(request.type, request.route)) {
				return this.router._fetch("errors", 404).callback(socket, request, response);
			}

			// call route if it exists
			this.router._fetch(request.type, request.route).run(socket, request, response);

		} catch (e) {
			return this.router._fetch("errors", 500).callback(socket, request, response);
		}
	}



}