"use strict";

module.exports = class Response {
	constructor(router, socket, args) {
		this.router = router;

		this.receiver = [];
		if (typeof socket !== "undefined")
			this.receiver.push(socket);

		if (typeof args != "undefined") {
			this.type = args.type.toLowerCase();
			this.route = args.route;
		}
		else {
			this.type = "get";
			this.route = "/";
		}
		
	}

	_send(type, route, data, headers) {
		if (typeof headers!="object")
			headers = {status: 200};

		for (var key in this.receiver)
			this.receiver[key].connection.send(JSON.stringify({type: type.toLowerCase(), route: route, data: data, headers: headers}));
	}

	respond(data, headers) {
		this._send(this.type, this.route, data, headers)
	}

	post(route, data, headers) { this._send("post", route, data, headers); }
	get(route, data, headers) { this._send("get", route, data, headers); }
	put(route, data, headers) { this._send("put", route, data, headers); }
	delete(route, data, headers) { this._send("delete", route, data, headers); }

	tellSocket(socket) {
		this.receiver = [socket];
		return this;
	}

	addSocket(socket) {
		this.receiver.push(socket);
		return this;
	}



	tellRoom(name) {
		this.receiver = [];	
		this.addRoom(name);
		return this;
	}

	addRoom(name) {
		for (var key in this.router.sockets) {
			if (this.router.sockets[key].isinRoom(name))
				this.receiver.push(this.router.sockets[key]);
		}
		return this;
	}

	tellAll() {
		this.receiver = [];	
		for (var key in this.router.sockets) 
			this.receiver.push(this.router.sockets[key]);
		return this;
	}


}