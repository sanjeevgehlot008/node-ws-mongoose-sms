"use strict";

class Route {

	constructor(router, args, middlewares, afterwares) {
		this.router = router;

		// Set default args
		this.args = {
			prefix: ""
		}
		if (typeof args == "object")
			this._setArgs(args);


		this._middlewares = [];
		if (Array.isArray(middlewares)) {
			for (var i=0; i<middlewares.length; i++)
				this._middlewares.push(middlewares[i]);  
		}

		this._afterwares = [];
		if (Array.isArray(afterwares)) {
			for (var i=0; i<afterwares.length; i++)
				this._afterwares.push(afterwares[i]);  
		}

	}



	_createRoute(args, middlewares, afterwares) {
		let args_extended = {};
		Object.assign(args_extended, this.args, args);

		var mids = this._middlewares.concat(middlewares);
		var afters = this._afterwares.concat(afterwares);
		return new Route(this.router, args_extended, mids, afters);
	}

	middleware(middlewares) {
		var route = this._createRoute({}, middlewares, []);	
		return route;
	}

	afterware(afterwares) {
		var route = this._createRoute({}, [], afterwares);	
		return route;
	}

	registerRoute(type, route, callback) {
		var r = new Route(this.router, this.args, this._middlewares, this._afterwares)
		r.callback = callback;
		this.router.routes[type][(this.args.prefix+route)] = r;
		return r;
	}
	get (route_path, callback) { 
		return this.registerRoute("get", route_path, callback);
	}
	post (route_path, callback) { 
		return this.registerRoute("post", route_path, callback);
	}
	put (route_path, callback) { 
		return this.registerRoute("put", route_path, callback);
	}
	delete (route_path, callback) { 
		return this.registerRoute("delete", route_path, callback);
	}
	error (route_path, callback) { 
		return this.registerRoute("errors", route_path, callback);
	}

	_setArgs(args) {
		for (var key in args)
			this.args[key] = args[key];
	}

	group(args, callback) {
		let route = this._createRoute(args, [], []);	
		callback(route);
		return route;
	}

	run(socket, request, response) {
		// middleware pattern
		var sequence = this._middlewares.concat([this.callback], this._afterwares);

		function m(socket, request, response, sequence) {
			// Get first middleware or callback
			if (sequence.length==0)
				return;

			var fn = sequence.shift();

			function next() {
				m(socket, request, response, sequence);
			}

			fn(socket, request, response, next);
	
		}
		// run middlewares
		m(socket, request, response, sequence);
	}

}

module.exports = class Router {
	constructor() {
		this.routes = {get: {}, post: {}, put: {}, delete: {}, errors: {}};

		// Declaring default error routes
		this.error(400, function(socket, request, response) {
			response.respond("400 - bad request", {status: 400});
		});
		this.error(404, function(socket, request, response) {
			response.respond("404 - route not found", {status: 404});
		});
		this.error(500, function(socket, request, response) {
			response.respond("500 - internal error", {status: 500});
		});
	}

	registerRoute(type, route, callback) {
		var routeCreator = new Route(this, ""); 
		routeCreator.registerRoute(type, route, callback);
		return routeCreator;
	}
	
	get (route_path, callback) { 
		return this.registerRoute("get", route_path, callback);
	}
	post (route_path, callback) { 
		return this.registerRoute("post", route_path, callback);
	}
	put (route_path, callback) { 
		return this.registerRoute("put", route_path, callback);
	}
	delete (route_path, callback) { 
		return this.registerRoute("delete", route_path, callback);
	}
	error (route_path, callback) { 
		return this.registerRoute("errors", route_path, callback);
	}
	middleware (middlewares) { 
		var route = new Route(this, "");
		return route.middleware(middlewares);
	}
	afterware (afterwares) { 
		var route = new Route(this, "");
		return route.afterware(afterwares);
	}

	// group routes
	group(presets, callback) {
		var route = new Route(this, presets);
		callback(route);
		return route;
	}	

	_routeExists(type, route) {
		return this.routes[type].hasOwnProperty(route);
	}

	_fetch(type, route) {
		return this.routes[type][route];
	}

}